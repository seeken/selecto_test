# Selecto Demo

## Selecto, a query builder

TODO

* setup instructions
* more examples
* domain details

Selecto lets you compose queries functionally, rather than through the Ecto DSL. This makes some types of queries vastly simpler to write.

To use Selecto, you first create a domain:

```elixir
domain = SelectoTest.PagilaDomain.actors_domain()
```

Next, configure a Selecto struct

```elixir
selecto = Selecto.configure(SelectoTest.Repo, domain)
```

## Example Queries

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select([1, 1.1, true, {:literal, "string"}, {:count}])
|> Selecto.filter({"actor_id", 1})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select(["first_name", "last_name", "actor_id"])
|> Selecto.filter([
  {:not,
   {:or,
    [
      {"actor_id", [1, 2]},
      {"actor_id", 3}
    ]}}
])
|> Selecto.order_by({:desc, "actor_id"})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select({:count, "*", {"first_name", {"!=", "DAN"}}})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select({:concat, ["first_name", {:literal, " "}, "last_name"]})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select({:coalesce, ["language[name]", {:literal, "[Nil]"}]})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select(
  {:case,
   [
     {
       {"first_name", {:like, "G%"}},
       {:literal, "G!"}
     },
     {
       {"first_name", {:like, "F%"}},
       {:literal, "F!"}
     }
   ], "first_name"}
)
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.filter({"actor_id", ">", {:raw_subquery, :any, "select 190", []}})
|> Selecto.select({:concat, ["first_name", {:literal, " "}, "last_name"]})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.filter({:exists, "select 1", []})
|> Selecto.select({:concat, ["first_name", {:literal, " "}, "last_name"]})
|> Selecto.execute()
```

```elixir
Selecto.configure(SelectoTest.Repo, domain)
|> Selecto.select({:concat, ["first_name", {:literal, " "}, "last_name"]})
|> Selecto.select_subquery(["film_name"], [])
|> Selecto.execute()
```
